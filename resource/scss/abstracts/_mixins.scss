@use "sass:map";

@use "sass:math";

@use "./variables" as var;

@use "./functions" as func;

@mixin mq($key-or-size, $direction: "max") {
  @if (type-of($key-or-size) == "string") {
    $size: map-get(var.$containers, $key-or-size);

    @media (#{$direction}-width: #{$size}px) {
      @content;
    }
  } @else if (type-of($key-or-size) == "number") {
    @media (#{$direction}-width: #{$key-or-size}px) {
      @content;
    }
  } @else {
    @error "No found breakpoint: #{$key-or-size}";
  }
}

@mixin pos-full() {
  position: absolute;

  top: 0;

  left: 0;

  width: 100%;

  height: 100%;
}

@mixin pos-center() {
  position: absolute;

  top: 50%;

  left: 50%;

  transform: translate(-50%, -50%);

  width: 100%;

  height: 100%;
}

@mixin set-fluid($map) {
  @each $key, $val in $map {
    $min: map-get($val, "min");
    $max: map-get($val, "max");

    #{$key}: func.fluid($min, $max);
  }
}

@mixin section-fluid-by-map($map) {
  $min: map-get($map, "min");

  $max: map-get($map, "max");

  $max-w: map-get($map, "max-width");

  $min-w: map-get($map, "min-width");

  padding-bottom: func.fluid($min, $max, $min-w, $max-w);

  padding-top: func.fluid($min, $max, $min-w, $max-w);
}

@mixin fs-static-by-map($map) {
  $base: map-get($map, "base");

  $fw: map-get($map, "fw");

  $lh: map-get($map, "lh");

  $ls: map-get($map, "ls");

  $ff: map-get($map, "ff");

  @if ($base != null) {
    font-size: func.pxToRem($base);
  }

  @if ($fw != null) {
    font-weight: $fw;
  }

  @if ($lh != null) {
    line-height: $lh;
  }
  @if ($ff != null) {
    font-family: $ff;
  }

  @if ($ls != null) {
    letter-spacing: func.pxToRem($ls);
  }

  @each $con-key, $con-val in var.$containers {
    $breakpoint: map-get($map, $con-key);

    @if ($breakpoint != null) {
      @include mq($con-key) {
        font-size: func.pxToRem($breakpoint);
      }
    }
  }
}

@mixin fs-fluid-by-map($map) {
  $min: map-get($map, "min");

  $max: map-get($map, "max");

  $max-w: map-get($map, "max-width");

  $min-w: map-get($map, "min-width");

  $lh: map-get($map, "lh");

  $fw: map-get($map, "fw");

  $ls: map-get($map, "ls");

  $ff: map-get($map, "ff");

  font-size: func.fluid($min, $max, $max-w, $min-w);

  @if ($lh != null) {
    line-height: $lh;
  }

  @if ($fw != null) {
    font-weight: $fw;
  }

  @if ($ls != null) {
    letter-spacing: func.pxToRem($ls);
  }

  @if ($ff != null) {
    font-family: $ff;
  }
}

@mixin fs-fluid($min, $max, $min-width: null, $max-width: null) {
  font-size: func.fluid($min, $max, $min-width, $max-width);
}

@mixin fs-static($fs, $key: "null") {
  @if ($key == "null") {
    font-size: $fs;
  } @else {
    @include mq($key) {
      font-size: $fs;
    }
  }
}

@mixin mq-max($key-or-size) {
  @include mq($key-or-size, "max") {
    @content;
  }
}

@mixin mq-min($key-or-size) {
  @include mq($key-or-size, "min") {
    @content;
  }
}

@mixin flex-center() {
  display: flex;

  align-items: center;

  justify-content: center;
}

@mixin blind() {
  position: absolute;

  clip: rect(0 0 0 0);

  width: 1px;

  height: 1px;

  margin: -1px;

  overflow: hidden;
}

@mixin pos-center() {
  position: absolute;

  top: 0;

  left: 0;

  width: 100%;

  height: 100%;
}

@mixin line-clamp($line) {
  overflow: hidden;

  text-overflow: ellipsis;

  -webkit-box-orient: vertical;

  display: -webkit-box;

  -webkit-line-clamp: $line;
}

@mixin img-cover() {
  width: 100%;

  height: 100%;

  object-fit: cover;
}

@mixin img-auto-cover($percent: 56.25%) {
  position: relative;

  overflow: hidden;

  height: 0;

  padding-bottom: $percent;

  img {
    @include pos-center();

    object-fit: cover;
  }
}

@mixin backdrop($opacity: 0.45) {
  @include pos-center();

  background: rgba(0, 0, 0, $opacity);
}
